/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardSettingsRouteImport } from './routes/dashboard/settings'
import { Route as DashboardSearchRouteImport } from './routes/dashboard/search'
import { Route as DashboardInboxRouteImport } from './routes/dashboard/inbox'
import { Route as DashboardHomeRouteImport } from './routes/dashboard/home'
import { Route as DashboardCalendarRouteImport } from './routes/dashboard/calendar'

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardSettingsRoute = DashboardSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardSearchRoute = DashboardSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardInboxRoute = DashboardInboxRouteImport.update({
  id: '/inbox',
  path: '/inbox',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardHomeRoute = DashboardHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardCalendarRoute = DashboardCalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => DashboardRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/calendar': typeof DashboardCalendarRoute
  '/dashboard/home': typeof DashboardHomeRoute
  '/dashboard/inbox': typeof DashboardInboxRoute
  '/dashboard/search': typeof DashboardSearchRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/dashboard/calendar': typeof DashboardCalendarRoute
  '/dashboard/home': typeof DashboardHomeRoute
  '/dashboard/inbox': typeof DashboardInboxRoute
  '/dashboard/search': typeof DashboardSearchRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/calendar': typeof DashboardCalendarRoute
  '/dashboard/home': typeof DashboardHomeRoute
  '/dashboard/inbox': typeof DashboardInboxRoute
  '/dashboard/search': typeof DashboardSearchRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboard'
    | '/dashboard/calendar'
    | '/dashboard/home'
    | '/dashboard/inbox'
    | '/dashboard/search'
    | '/dashboard/settings'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/dashboard/calendar'
    | '/dashboard/home'
    | '/dashboard/inbox'
    | '/dashboard/search'
    | '/dashboard/settings'
    | '/dashboard'
  id:
    | '__root__'
    | '/dashboard'
    | '/dashboard/calendar'
    | '/dashboard/home'
    | '/dashboard/inbox'
    | '/dashboard/search'
    | '/dashboard/settings'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/search': {
      id: '/dashboard/search'
      path: '/search'
      fullPath: '/dashboard/search'
      preLoaderRoute: typeof DashboardSearchRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/inbox': {
      id: '/dashboard/inbox'
      path: '/inbox'
      fullPath: '/dashboard/inbox'
      preLoaderRoute: typeof DashboardInboxRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/home': {
      id: '/dashboard/home'
      path: '/home'
      fullPath: '/dashboard/home'
      preLoaderRoute: typeof DashboardHomeRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/calendar': {
      id: '/dashboard/calendar'
      path: '/calendar'
      fullPath: '/dashboard/calendar'
      preLoaderRoute: typeof DashboardCalendarRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
  }
}

interface DashboardRouteRouteChildren {
  DashboardCalendarRoute: typeof DashboardCalendarRoute
  DashboardHomeRoute: typeof DashboardHomeRoute
  DashboardInboxRoute: typeof DashboardInboxRoute
  DashboardSearchRoute: typeof DashboardSearchRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardCalendarRoute: DashboardCalendarRoute,
  DashboardHomeRoute: DashboardHomeRoute,
  DashboardInboxRoute: DashboardInboxRoute,
  DashboardSearchRoute: DashboardSearchRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
