/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedDashboardRouteRouteImport } from './routes/_authenticated/_dashboard/route'
import { Route as AuthenticatedDashboardIndexRouteImport } from './routes/_authenticated/_dashboard/index'
import { Route as AuthenticatedDashboardSettingsRouteImport } from './routes/_authenticated/_dashboard/settings'
import { Route as AuthenticatedDashboardSearchRouteImport } from './routes/_authenticated/_dashboard/search'
import { Route as AuthenticatedDashboardInboxRouteImport } from './routes/_authenticated/_dashboard/inbox'
import { Route as AuthenticatedDashboardHomeRouteImport } from './routes/_authenticated/_dashboard/home'
import { Route as AuthenticatedDashboardCalendarRouteImport } from './routes/_authenticated/_dashboard/calendar'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedDashboardRouteRoute =
  AuthenticatedDashboardRouteRouteImport.update({
    id: '/_dashboard',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedDashboardIndexRoute =
  AuthenticatedDashboardIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedDashboardRouteRoute,
  } as any)
const AuthenticatedDashboardSettingsRoute =
  AuthenticatedDashboardSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthenticatedDashboardRouteRoute,
  } as any)
const AuthenticatedDashboardSearchRoute =
  AuthenticatedDashboardSearchRouteImport.update({
    id: '/search',
    path: '/search',
    getParentRoute: () => AuthenticatedDashboardRouteRoute,
  } as any)
const AuthenticatedDashboardInboxRoute =
  AuthenticatedDashboardInboxRouteImport.update({
    id: '/inbox',
    path: '/inbox',
    getParentRoute: () => AuthenticatedDashboardRouteRoute,
  } as any)
const AuthenticatedDashboardHomeRoute =
  AuthenticatedDashboardHomeRouteImport.update({
    id: '/home',
    path: '/home',
    getParentRoute: () => AuthenticatedDashboardRouteRoute,
  } as any)
const AuthenticatedDashboardCalendarRoute =
  AuthenticatedDashboardCalendarRouteImport.update({
    id: '/calendar',
    path: '/calendar',
    getParentRoute: () => AuthenticatedDashboardRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/calendar': typeof AuthenticatedDashboardCalendarRoute
  '/home': typeof AuthenticatedDashboardHomeRoute
  '/inbox': typeof AuthenticatedDashboardInboxRoute
  '/search': typeof AuthenticatedDashboardSearchRoute
  '/settings': typeof AuthenticatedDashboardSettingsRoute
  '/': typeof AuthenticatedDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/calendar': typeof AuthenticatedDashboardCalendarRoute
  '/home': typeof AuthenticatedDashboardHomeRoute
  '/inbox': typeof AuthenticatedDashboardInboxRoute
  '/search': typeof AuthenticatedDashboardSearchRoute
  '/settings': typeof AuthenticatedDashboardSettingsRoute
  '/': typeof AuthenticatedDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/_dashboard': typeof AuthenticatedDashboardRouteRouteWithChildren
  '/_authenticated/_dashboard/calendar': typeof AuthenticatedDashboardCalendarRoute
  '/_authenticated/_dashboard/home': typeof AuthenticatedDashboardHomeRoute
  '/_authenticated/_dashboard/inbox': typeof AuthenticatedDashboardInboxRoute
  '/_authenticated/_dashboard/search': typeof AuthenticatedDashboardSearchRoute
  '/_authenticated/_dashboard/settings': typeof AuthenticatedDashboardSettingsRoute
  '/_authenticated/_dashboard/': typeof AuthenticatedDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/calendar'
    | '/home'
    | '/inbox'
    | '/search'
    | '/settings'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/calendar'
    | '/home'
    | '/inbox'
    | '/search'
    | '/settings'
    | '/'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/_dashboard'
    | '/_authenticated/_dashboard/calendar'
    | '/_authenticated/_dashboard/home'
    | '/_authenticated/_dashboard/inbox'
    | '/_authenticated/_dashboard/search'
    | '/_authenticated/_dashboard/settings'
    | '/_authenticated/_dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/_dashboard': {
      id: '/_authenticated/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedDashboardRouteRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/_dashboard/': {
      id: '/_authenticated/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedDashboardIndexRouteImport
      parentRoute: typeof AuthenticatedDashboardRouteRoute
    }
    '/_authenticated/_dashboard/settings': {
      id: '/_authenticated/_dashboard/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedDashboardSettingsRouteImport
      parentRoute: typeof AuthenticatedDashboardRouteRoute
    }
    '/_authenticated/_dashboard/search': {
      id: '/_authenticated/_dashboard/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof AuthenticatedDashboardSearchRouteImport
      parentRoute: typeof AuthenticatedDashboardRouteRoute
    }
    '/_authenticated/_dashboard/inbox': {
      id: '/_authenticated/_dashboard/inbox'
      path: '/inbox'
      fullPath: '/inbox'
      preLoaderRoute: typeof AuthenticatedDashboardInboxRouteImport
      parentRoute: typeof AuthenticatedDashboardRouteRoute
    }
    '/_authenticated/_dashboard/home': {
      id: '/_authenticated/_dashboard/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthenticatedDashboardHomeRouteImport
      parentRoute: typeof AuthenticatedDashboardRouteRoute
    }
    '/_authenticated/_dashboard/calendar': {
      id: '/_authenticated/_dashboard/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof AuthenticatedDashboardCalendarRouteImport
      parentRoute: typeof AuthenticatedDashboardRouteRoute
    }
  }
}

interface AuthenticatedDashboardRouteRouteChildren {
  AuthenticatedDashboardCalendarRoute: typeof AuthenticatedDashboardCalendarRoute
  AuthenticatedDashboardHomeRoute: typeof AuthenticatedDashboardHomeRoute
  AuthenticatedDashboardInboxRoute: typeof AuthenticatedDashboardInboxRoute
  AuthenticatedDashboardSearchRoute: typeof AuthenticatedDashboardSearchRoute
  AuthenticatedDashboardSettingsRoute: typeof AuthenticatedDashboardSettingsRoute
  AuthenticatedDashboardIndexRoute: typeof AuthenticatedDashboardIndexRoute
}

const AuthenticatedDashboardRouteRouteChildren: AuthenticatedDashboardRouteRouteChildren =
  {
    AuthenticatedDashboardCalendarRoute: AuthenticatedDashboardCalendarRoute,
    AuthenticatedDashboardHomeRoute: AuthenticatedDashboardHomeRoute,
    AuthenticatedDashboardInboxRoute: AuthenticatedDashboardInboxRoute,
    AuthenticatedDashboardSearchRoute: AuthenticatedDashboardSearchRoute,
    AuthenticatedDashboardSettingsRoute: AuthenticatedDashboardSettingsRoute,
    AuthenticatedDashboardIndexRoute: AuthenticatedDashboardIndexRoute,
  }

const AuthenticatedDashboardRouteRouteWithChildren =
  AuthenticatedDashboardRouteRoute._addFileChildren(
    AuthenticatedDashboardRouteRouteChildren,
  )

interface AuthenticatedRouteRouteChildren {
  AuthenticatedDashboardRouteRoute: typeof AuthenticatedDashboardRouteRouteWithChildren
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedDashboardRouteRoute:
    AuthenticatedDashboardRouteRouteWithChildren,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
